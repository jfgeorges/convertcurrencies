{"version":3,"sources":["components/Option.js","App.js","serviceWorker.js","index.js","assets/img/change.png"],"names":["Option","react_default","a","createElement","value","this","props","currency","React","Component","App","state","leftAmount","rightAmount","leftCurrency","rightCurrency","renderOption","Object","keys","rates","map","currencyKey","i","components_Option","key","convertCurrency","amount","fromRate","toRate","toFixed","handleChange","event","input","target","name","newState","element","document","getElementById","isNaN","classList","add","_this","remove","setState","className","alt","src","logoConvert","id","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4kFAQeA,mLAJX,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,MAAOC,KAAKC,MAAMC,UAAWF,KAAKC,MAAMC,iBAFtCC,IAAMC,WC4GZC,6MAvGbC,MAAQ,CACNC,WAAY,EACZC,YAAa,EACbC,aAAc,MACdC,cAAe,SAGjBC,aAAe,WAKb,OAAOC,OAAOC,KAAKC,GAAOC,IAAI,SAACC,EAAaC,GAAd,OAAoBrB,EAAAC,EAAAC,cAACoB,EAAD,CAAQC,IAAKF,EAAGf,SAAUc,SAG9EI,gBAAkB,SAACC,EAAQC,EAAUC,GACnC,OAASA,EAASD,EAAYD,GAAQG,QAAQ,MAGhDC,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAME,OACdC,EAAOF,EAAME,KACb9B,EAAQ4B,EAAM5B,MAEd+B,EAAW,GACjBA,EAASD,GAAQ9B,EAEjB,IAAMgC,EAAUC,SAASC,eAAeJ,GAExC,OAAQA,GACN,IAAK,aACEK,MAAMnC,IAIT+B,EAAStB,YAAc,GACvBuB,EAAQI,UAAUC,IAAI,SAJtBN,EAAStB,YAAc6B,EAAKjB,gBAAgBU,EAASD,GAAOf,EAAMuB,EAAK/B,MAAMG,cAAeK,EAAMuB,EAAK/B,MAAMI,gBAC7GqB,EAAQI,UAAUG,OAAO,QAK3B,MACF,IAAK,cACEJ,MAAMnC,IAIT+B,EAASvB,WAAa,GACtBwB,EAAQI,UAAUC,IAAI,SAJtBN,EAASvB,WAAa8B,EAAKjB,gBAAgBU,EAASD,GAAOf,EAAMuB,EAAK/B,MAAMI,eAAgBI,EAAMuB,EAAK/B,MAAMG,eAC7GsB,EAAQI,UAAUG,OAAO,QAK3B,MACF,IAAK,eACHR,EAAStB,YAAc6B,EAAKjB,gBAAgBiB,EAAK/B,MAAMC,WAAYO,EAAMgB,EAASD,IAAQf,EAAMuB,EAAK/B,MAAMI,gBAC3G,MACF,QAEEoB,EAAStB,YAAc6B,EAAKjB,gBAAgBiB,EAAK/B,MAAMC,WAAYO,EAAMuB,EAAK/B,MAAMG,cAAeK,EAAMgB,EAASD,KAEtHQ,EAAKE,SAAST,4EAId,OACElC,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,aACb5C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,uCAEFF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAK0C,UAAW,UACd5C,EAAAC,EAAAC,cAAA,OAAK2C,IAAI,gBAAgBD,UAAW,OAAQE,IAAKC,QAGrD/C,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,eACb5C,EAAAC,EAAAC,cAAA,SACE8C,GAAI,aACJC,KAAK,OACLC,YAAY,eACZjB,KAAM,aACN9B,MAAOC,KAAKM,MAAMC,WAClBwC,SAAU/C,KAAKyB,eAEjB7B,EAAAC,EAAAC,cAAA,UAAQC,MAAOC,KAAKM,MAAMG,aAAcoB,KAAM,eAAgBkB,SAAU/C,KAAKyB,cAC1EzB,KAAKW,iBAGVf,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,SAAS,OACxB5C,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,eACb5C,EAAAC,EAAAC,cAAA,SACE8C,GAAI,cACJC,KAAK,OACLC,YAAY,eACZjB,KAAM,cACN9B,MAAOC,KAAKM,MAAME,YAClBuC,SAAU/C,KAAKyB,eAEjB7B,EAAAC,EAAAC,cAAA,UAAQC,MAAOC,KAAKM,MAAMI,cAAemB,KAAM,gBAAiBkB,SAAU/C,KAAKyB,cAC5EzB,KAAKW,0BA/FFP,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASvB,SAASC,eAAe,SD2H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9abb9a4b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Option extends React.Component {\r\n  render() {\r\n    return <option value={this.props.currency}>{this.props.currency}</option>;\r\n  }\r\n}\r\n\r\nexport default Option;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport rates from \"./assets/data/rates.json\";\nimport logoConvert from \"./assets/img/change.png\";\nimport Option from \"./components/Option\";\n\nclass App extends Component {\n  state = {\n    leftAmount: 1,\n    rightAmount: 1,\n    leftCurrency: \"EUR\",\n    rightCurrency: \"EUR\"\n  };\n\n  renderOption = () => {\n    // On récupère les devises dans un tableau avec keys() sur lequel on exécute un map() qui renvoie chaque option dans une tableau\n    // Ajout de la key unique pour la gestion React\n    // le tableau renvoyé par map contient à l'exécution des lignes interprétées par React. Elles sont de la forme :\n    // 0: {$$typeof: Symbol(react.element), type: ƒ, key: \"0\", ref: null, props: {…}, …}\n    return Object.keys(rates).map((currencyKey, i) => <Option key={i} currency={currencyKey} />);\n  };\n\n  convertCurrency = (amount, fromRate, toRate) => {\n    return ((toRate / fromRate) * amount).toFixed(2);\n  };\n\n  handleChange = event => {\n    const input = event.target;\n    const name = input.name;\n    const value = input.value;\n\n    const newState = {};\n    newState[name] = value; // Ajout de la valeur modifiée à la clé dont le nom correspond au 'name' donné aux éléments select et input\n\n    const element = document.getElementById(name); // Pour ajouter la classe red sur l'élément lorsque l'on ne saisit pas un nombre\n    // La devise côté gauche domine (cf. http://www.convertmymoney.com/)\n    switch (name) {\n      case \"leftAmount\":\n        if (!isNaN(value)) {\n          newState.rightAmount = this.convertCurrency(newState[name], rates[this.state.leftCurrency], rates[this.state.rightCurrency]);\n          element.classList.remove(\"red\");\n        } else {\n          newState.rightAmount = \"\";\n          element.classList.add(\"red\");\n        }\n        break;\n      case \"rightAmount\":\n        if (!isNaN(value)) {\n          newState.leftAmount = this.convertCurrency(newState[name], rates[this.state.rightCurrency], rates[this.state.leftCurrency]);\n          element.classList.remove(\"red\");\n        } else {\n          newState.leftAmount = \"\";\n          element.classList.add(\"red\");\n        }\n        break;\n      case \"leftCurrency\":\n        newState.rightAmount = this.convertCurrency(this.state.leftAmount, rates[newState[name]], rates[this.state.rightCurrency]);\n        break;\n      default:\n        // rightCurrency\n        newState.rightAmount = this.convertCurrency(this.state.leftAmount, rates[this.state.leftCurrency], rates[newState[name]]);\n    }\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header>\n          <h1>Convertisseur de devises</h1>\n        </header>\n        <section>\n          <div className={\"cercle\"}>\n            <img alt=\"logoConverter\" className={\"logo\"} src={logoConvert} />\n          </div>\n        </section>\n        <form>\n          <div className=\"currencyBox\">\n            <input\n              id={\"leftAmount\"}\n              type=\"text\"\n              placeholder=\"Enter amount\"\n              name={\"leftAmount\"}\n              value={this.state.leftAmount}\n              onChange={this.handleChange}\n            />\n            <select value={this.state.leftCurrency} name={\"leftCurrency\"} onChange={this.handleChange}>\n              {this.renderOption()}\n            </select>\n          </div>\n          <div className=\"equal\">{\" = \"}</div>\n          <div className=\"currencyBox\">\n            <input\n              id={\"rightAmount\"}\n              type=\"text\"\n              placeholder=\"Enter amount\"\n              name={\"rightAmount\"}\n              value={this.state.rightAmount}\n              onChange={this.handleChange}\n            />\n            <select value={this.state.rightCurrency} name={\"rightCurrency\"} onChange={this.handleChange}>\n              {this.renderOption()}\n            </select>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/change.bd4a608f.png\";"],"sourceRoot":""}